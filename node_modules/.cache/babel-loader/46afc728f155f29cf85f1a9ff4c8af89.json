{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\lxhei\\\\Desktop\\\\Projects\\\\Minimalist-Crypto-Ticker\\\\src\\\\Result.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\n\nconst Result = props => {\n  _s();\n\n  const mounted = useRef(); //state = {price: \"\"};\n\n  const [price, setPrice] = useState(\"\"); //console.log(props.token);\n\n  const checker = () => {\n    if (price === \"\") {\n      return \"\";\n    } else {\n      return '$' + parseFloat(price).toFixed(2);\n    }\n  };\n  /*Once the Results component has recieved the crypto info (coin and currency codes),\r\n  we can pass them (as props) into our sendReq() method, which will open a GET request via\r\n  Axios with these codes passed into the request URL.\r\n  */\n\n\n  const sendReq = async () => {\n    const res = await axios.get(`https://api.cryptonator.com/api/ticker/${props.token}-${props.currency}`);\n    return res;\n  }; //do this to resolve the memory leak warning from the componentDidUpdate() method\n\n  /*componentDidMount() {\r\n      console.log(\"Component has mounted.\")\r\n  }\r\n    componentDidUpdate() {\r\n      this.sendReq();\r\n  }*/\n\n\n  useEffect(() => {\n    //sendReq();\n    if (!mounted.current) {\n      mounted.current = true;\n      console.log(\"Component has mounted.\");\n    } else {}\n\n    sendReq().then(resp => {\n      //console.log(resp);\n      setPrice(resp.data.ticker.price);\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"results\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"coinTitle\",\n      children: props.token ? props.token.toUpperCase() : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"priceTitle\",\n      children: checker()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Result, \"3k9k5/58xlEORcAEUFyZYqpYepE=\");\n\n_c = Result;\nexport default Result;\n\nvar _c;\n\n$RefreshReg$(_c, \"Result\");","map":{"version":3,"sources":["C:/Users/lxhei/Desktop/Projects/Minimalist-Crypto-Ticker/src/Result.js"],"names":["React","useState","useEffect","useRef","axios","Result","props","mounted","price","setPrice","checker","parseFloat","toFixed","sendReq","res","get","token","currency","current","console","log","then","resp","data","ticker","toUpperCase"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,MAApC,QAAiD,OAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AACtB,QAAMC,OAAO,GAAGJ,MAAM,EAAtB,CADsB,CAEtB;;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC,CAHsB,CAItB;;AACA,QAAMS,OAAO,GAAG,MAAM;AAElB,QAAGF,KAAK,KAAK,EAAb,EAAiB;AACb,aAAO,EAAP;AACH,KAFD,MAEO;AACH,aAAO,MAAMG,UAAU,CAACH,KAAD,CAAV,CAAkBI,OAAlB,CAA0B,CAA1B,CAAb;AACH;AACJ,GAPD;AAQA;AACJ;AACA;AACA;;;AAEI,QAAMC,OAAO,GAAG,YAAY;AAExB,UAAMC,GAAG,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAW,0CAAyCT,KAAK,CAACU,KAAM,IAAGV,KAAK,CAACW,QAAS,EAAlF,CAAlB;AAEA,WAAOH,GAAP;AACH,GALD,CAlBsB,CAyBtB;;AACA;AACJ;AACA;AACA;AACA;AACA;;;AAEIZ,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAG,CAACK,OAAO,CAACW,OAAZ,EAAqB;AACjBX,MAAAA,OAAO,CAACW,OAAR,GAAkB,IAAlB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH,KAHD,MAGO,CAEN;;AAACP,IAAAA,OAAO,GAAGQ,IAAV,CAAeC,IAAI,IAAI;AACrB;AACAb,MAAAA,QAAQ,CAACa,IAAI,CAACC,IAAL,CAAUC,MAAV,CAAiBhB,KAAlB,CAAR;AAEC,KAJH;AAML,GAbQ,CAAT;AAeA,sBACI;AAAK,IAAA,SAAS,EAAG,SAAjB;AAAA,4BACI;AAAI,MAAA,SAAS,EAAG,WAAhB;AAAA,gBAA6BF,KAAK,CAACU,KAAN,GAAcV,KAAK,CAACU,KAAN,CAAYS,WAAZ,EAAd,GAA0C;AAAvE;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAI,MAAA,SAAS,EAAG,YAAhB;AAAA,gBAA8Bf,OAAO;AAArC;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAtDD;;GAAML,M;;KAAAA,M;AAyDN,eAAeA,MAAf","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Result = (props) => {\r\n    const mounted = useRef();\r\n    //state = {price: \"\"};\r\n    const [price, setPrice] = useState(\"\");\r\n    //console.log(props.token);\r\n    const checker = () => {\r\n\r\n        if(price === \"\") {\r\n            return \"\";\r\n        } else {\r\n            return '$' + parseFloat(price).toFixed(2);\r\n        }\r\n    }\r\n    /*Once the Results component has recieved the crypto info (coin and currency codes),\r\n    we can pass them (as props) into our sendReq() method, which will open a GET request via\r\n    Axios with these codes passed into the request URL.\r\n    */\r\n   \r\n    const sendReq = async () => {\r\n\r\n        const res = await axios.get(`https://api.cryptonator.com/api/ticker/${props.token}-${props.currency}`\r\n        )\r\n        return res;\r\n    }\r\n\r\n    //do this to resolve the memory leak warning from the componentDidUpdate() method\r\n    /*componentDidMount() {\r\n        console.log(\"Component has mounted.\")\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.sendReq();\r\n    }*/\r\n    useEffect(() => {\r\n        //sendReq();\r\n        if(!mounted.current) {\r\n            mounted.current = true;\r\n            console.log(\"Component has mounted.\")\r\n        } else {\r\n\r\n        } sendReq().then(resp => {\r\n            //console.log(resp);\r\n            setPrice(resp.data.ticker.price)\r\n            \r\n            }\r\n        )\r\n    })\r\n\r\n    return(\r\n        <div className = \"results\">\r\n            <h3 className = \"coinTitle\">{props.token ? props.token.toUpperCase() : \"\"}</h3>\r\n            <h3 className = \"priceTitle\">{checker()}</h3>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Result;"]},"metadata":{},"sourceType":"module"}