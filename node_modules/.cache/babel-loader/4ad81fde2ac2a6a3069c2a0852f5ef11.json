{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\lxhei\\\\Desktop\\\\Projects\\\\Minimalist-Crypto-Ticker\\\\src\\\\Result.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst Result = props => {\n  _s();\n\n  const [price, setPrice] = useState(\"\");\n\n  const checker = () => {\n    console.log(props.currency);\n    let currencySymbol;\n\n    if (price === \"\") {\n      alert(\"Enter a currency to tabulate.\");\n      return \"\";\n    } else if (props.currency === 'USD') {\n      console.log(\"Currency is \" + props.currency);\n      currencySymbol = \"$\";\n    } else if (props.currency === 'GBP') {\n      currencySymbol = \"£\";\n    }\n\n    console.log(currencySymbol);\n    return currencySymbol + parseFloat(price).toFixed(7);\n  };\n  /*Once the Results component has recieved the crypto info (coin and currency codes),\r\n  we can pass them (as props) into our sendReq() method, which will open a GET request via\r\n  Axios with these codes passed into the request URL.\r\n  */\n\n\n  const sendReq = async () => {\n    const res = await axios.get(`https://api.cryptonator.com/api/ticker/${props.token}-${props.currency}`);\n    return res;\n  };\n\n  useEffect(() => {\n    //Update call every second\n    const priceQuery = setInterval(() => {\n      if (props.token && props.currency) {\n        sendReq().then(resp => {\n          setPrice(resp.data.ticker.price);\n        });\n      }\n    }, 1000);\n    return () => {\n      clearInterval(priceQuery);\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"results\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"coinTitle\",\n      children: props.token ? props.token.toUpperCase() : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"priceTitle\",\n      children: checker()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Result, \"I1bZ8U2TVhq5gfF2VZNzBFn/PUk=\");\n\n_c = Result;\nexport default Result;\n\nvar _c;\n\n$RefreshReg$(_c, \"Result\");","map":{"version":3,"sources":["C:/Users/lxhei/Desktop/Projects/Minimalist-Crypto-Ticker/src/Result.js"],"names":["React","useState","useEffect","axios","Result","props","price","setPrice","checker","console","log","currency","currencySymbol","alert","parseFloat","toFixed","sendReq","res","get","token","priceQuery","setInterval","then","resp","data","ticker","clearInterval","toUpperCase"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AACtB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;;AACA,QAAMO,OAAO,GAAG,MAAM;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACM,QAAlB;AACA,QAAIC,cAAJ;;AACA,QAAGN,KAAK,KAAK,EAAb,EAAiB;AACbO,MAAAA,KAAK,CAAC,+BAAD,CAAL;AACA,aAAO,EAAP;AACH,KAHD,MAGO,IAAGR,KAAK,CAACM,QAAN,KAAmB,KAAtB,EAA6B;AAChCF,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBL,KAAK,CAACM,QAAnC;AACAC,MAAAA,cAAc,GAAG,GAAjB;AACH,KAHM,MAGA,IAAGP,KAAK,CAACM,QAAN,KAAmB,KAAtB,EAA6B;AAChCC,MAAAA,cAAc,GAAG,GAAjB;AACH;;AAEDH,IAAAA,OAAO,CAACC,GAAR,CAAYE,cAAZ;AACA,WAAOA,cAAc,GAAGE,UAAU,CAACR,KAAD,CAAV,CAAkBS,OAAlB,CAA0B,CAA1B,CAAxB;AACH,GAfD;AAgBA;AACJ;AACA;AACA;;;AAEI,QAAMC,OAAO,GAAG,YAAY;AAExB,UAAMC,GAAG,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAW,0CAAyCb,KAAK,CAACc,KAAM,IAAGd,KAAK,CAACM,QAAS,EAAlF,CAAlB;AAEA,WAAOM,GAAP;AACH,GALD;;AAOAf,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,UAAMkB,UAAU,GAAGC,WAAW,CAAC,MAAM;AAEjC,UAAGhB,KAAK,CAACc,KAAN,IAAed,KAAK,CAACM,QAAxB,EAAkC;AAC9BK,QAAAA,OAAO,GAAGM,IAAV,CAAeC,IAAI,IAAI;AACnBhB,UAAAA,QAAQ,CAACgB,IAAI,CAACC,IAAL,CAAUC,MAAV,CAAiBnB,KAAlB,CAAR;AACH,SAFD;AAGH;AACJ,KAP6B,EAO3B,IAP2B,CAA9B;AASA,WAAO,MAAM;AAACoB,MAAAA,aAAa,CAACN,UAAD,CAAb;AAA0B,KAAxC;AAEH,GAbQ,CAAT;AAeA,sBACI;AAAK,IAAA,SAAS,EAAG,SAAjB;AAAA,4BACI;AAAI,MAAA,SAAS,EAAG,WAAhB;AAAA,gBAA6Bf,KAAK,CAACc,KAAN,GAAcd,KAAK,CAACc,KAAN,CAAYQ,WAAZ,EAAd,GAA0C;AAAvE;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAI,MAAA,SAAS,EAAG,YAAhB;AAAA,gBAA8BnB,OAAO;AAArC;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAnDD;;GAAMJ,M;;KAAAA,M;AAsDN,eAAeA,MAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Result = (props) => {\r\n    const [price, setPrice] = useState(\"\");\r\n    const checker = () => {\r\n        console.log(props.currency);\r\n        let currencySymbol;\r\n        if(price === \"\") {\r\n            alert(\"Enter a currency to tabulate.\");\r\n            return \"\";\r\n        } else if(props.currency === 'USD') {\r\n            console.log(\"Currency is \" + props.currency);\r\n            currencySymbol = \"$\";\r\n        } else if(props.currency === 'GBP') {\r\n            currencySymbol = \"£\";\r\n        }\r\n            \r\n        console.log(currencySymbol);\r\n        return currencySymbol + parseFloat(price).toFixed(7);\r\n    }\r\n    /*Once the Results component has recieved the crypto info (coin and currency codes),\r\n    we can pass them (as props) into our sendReq() method, which will open a GET request via\r\n    Axios with these codes passed into the request URL.\r\n    */\r\n   \r\n    const sendReq = async () => {\r\n\r\n        const res = await axios.get(`https://api.cryptonator.com/api/ticker/${props.token}-${props.currency}`\r\n        )\r\n        return res;\r\n    }\r\n\r\n    useEffect(() => {\r\n        //Update call every second\r\n        const priceQuery = setInterval(() => {\r\n            \r\n            if(props.token && props.currency) {\r\n                sendReq().then(resp => {\r\n                    setPrice(resp.data.ticker.price);\r\n                })\r\n            }\r\n        }, 1000);\r\n\r\n        return () => {clearInterval(priceQuery)};\r\n        \r\n    })\r\n\r\n    return(\r\n        <div className = \"results\">\r\n            <h3 className = \"coinTitle\">{props.token ? props.token.toUpperCase() : \"\"}</h3>\r\n            <h3 className = \"priceTitle\">{checker()}</h3>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Result;"]},"metadata":{},"sourceType":"module"}